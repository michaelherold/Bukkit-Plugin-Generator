#!/bin/bash
## A simple script to generate the skeleton for a new BukkitMod plugin.
## Written by: Pezmc

# OS Detection
## Check if we're running windows. If so, clear the
## "bash: warning: could not find /tmp, please create!
## error that likely occurred when bash was started.
if [ $_OS -a $_OS == "NT" ]; then
	_OS='nt'
else
	# Get the OS name and lowercase it.
	_OS=`uname -s | tr '[A-Z]' '[a-z]'`
	
	# Now test if it's Linux or Mac OSX
	if [[ $_OS == *linux* ]]; then
		_OS='linux'
	elif [[ $_OS == *cygwin* ]]; then
		_OS='nt'
	elif [[ $_OS == *darwin* ]]; then
		_OS='mac'
	fi
fi

# Set up the ANSI escape colors depending on OS.
if [[ $_OS == 'linux' || $_OS == 'nt' ]]; then
	# Standard ANSI escape codes.
	c_default='\e[0;37m'
	c_white='\e[1;37m'
	c_cyan='\e[1;36m'
	c_green='\e[1;32m'
	c_red='\e[0;31m'
	c_blue='\e[1;34m'
	c_yellow='\e[1;33m'
elif [[ $_OS == 'mac' ]]; then
	# For Mac OS X, we have to do it slightly
	# different.
	c_default='\033[0;37m'
	c_white='\033[1;37m'
	c_cyan='\033[1;36m'
	c_green='\033[1;32m'
	c_red='\033[0;31m'
	c_blue='\033[1;34m'
	c_yellow='\033[1;33m'
fi

# List of IDEs supported by project generation
IDE_LIST=( Ant Eclipse IntelliJ Netbeans )

# Pause (Getch)
function pause(){
	read -p "Press any key to continue..."
}

# Print the status of project generation generically
function print_generation() {
	local str_ide="$1"
	local gen="$2"
	echo -ne "    ${str_ide}${c_default}: " >&2; if [ $gen == 1 ]; then echo -e "${c_green}True${c_default}" >&2 ; else echo -e "${c_red}False${c_default}" >&2 ; fi
}

# Read Configuration Files
function read_config(){
	local cfgPath="$(pwd)/settings.cfg"
	if [ -a $cfgPath ]; then
		# There was a config file present, so output its preferences
		echo -e "\n${c_cyan}Reading ${c_green}config${c_cyan}...${c_default}" >&2
		source $cfgPath
		echo -e "  ${c_cyan}Creating IDE-specific projects:${c_default}" >&2
		for ide in ${IDE_LIST[@]} ;
		do
			set $ide;
			local gen_var="\$gen_$(echo $ide | tr '[A-Z]' '[a-z]')"
			eval gen_var=$gen_var
			print_generation $1 $gen_var
		done
	else
		# If there is no config file, give the user the option to configure
		# their IDE preferences
		yes_no config "\n${c_cyan}No ${c_green}config ${c_cyan}file found. Would you like to configure the system? (Y/N): ${c_default}"
		
		# If they don't want to configure the system, write a default config
		# with all IDEs set to false
		if [ $config == 0 ]; then
			echo -e "\n${c_cyan}Creating ${c_green}default config${c_cyan}...${c_default}" >&2
			echo -ne "# General Settings\noutput_folder=\".\"\n\n# Project File Generation\ngen_intellij=0\ngen_eclipse=0\ngen_netbeans=0\ngen_ant=0" > $cfgPath
			source $cfgPath
		else
			# Ask for user input for config for each IDE
			for ide in ${IDE_LIST[@]} ;
			do
				set $ide;
				local gen_var="gen_$(echo $ide | tr '[A-Z]' '[a-z]')"
				yes_no $gen_var "${c_cyan}Would you like to build a project for $ide? (Y/N): ${c_default}"
			done
			
			# Write configured file
			# TODO: Generalize it for new IDEs
			# TODO: Ask for output folder
			# TODO: Add username as a config variable
			# TODO: Add namespace as a config variable
			echo -ne "# General Settings\noutput_folder=\".\"\n\n# Project File Generation\ngen_intellij=${gen_intellij}\ngen_eclipse=${gen_eclipse}\ngen_netbeans=${gen_netbeans}\ngen_ant=${gen_ant}" > $cfgPath
		fi
	fi
	
	return
}

# Input validation.
function validate_input(){
	local _true=1; local _false=0
	# Get the input.
	local _input=${1}
	# Same as above, but with
	# dashes and underscores.
	local _symbols=${2:-$_true}
	# Unless stated otherwise,
	# numbers will be allowed.
	local _numbers=${3:-$_true}
	# Finally, anything
	local _anything${4:-$_false}
	if [ $_anything ]; then
		is_valid=1
		return
	fi
	# Escape some characters in the actual value.
	local _action=${_input//\$/\\\$}
	_action=${_action/\"/}
	
	# Begin assembling the expression.
	local _expr="sed -e 's/[a-zA-Z"
	
	## If we allow numbers, add them in.
	if [ $_numbers == 1 ]; then
		_expr="${_expr}0-9"
	fi
	
	## If we allow symbols, add them in.
	if [ $_symbols == 1 ]; then
		_expr="${_expr}_-"
	fi
	
	# Finish it off.
	_expr="${_expr}]//g'"
	
	# Now put it all together.
	local _result=""
	eval "_result=\$(echo -ne \"${_action}\" | ${_expr})"
	is_valid=$(( ${#_result} == 0 ? 1 : 0 ))
	return
}

# A simple looping yes/no dialog
# @param $1 The variable to write
# @param $2 The prompt to display
function yes_no() {
	local __resultvar=$1
	local _result
	echo -ne $2
	read _result; _result=$(echo $_result | tr '[A-Z]' '[a-z]')
	while :
	do
		if [ "$_result" == "y" -o "$_result" == "n" ]; then
			break;
		fi
		echo -n "Input not recognized. Please enter Y or N: "
		read _result; _result=$(echo $_result | tr '[A-Z]' '[a-z]')
	done
	
	if [ "$_result" == "y" ]; then
		_result=1
	else
		_result=0
	fi
	eval $__resultvar="'$_result'"
}

# Our banner.
echo -ne "${c_cyan} ___   _     _     _     _  _____ \n| |_) | | | | |_/ | |_/ | |  | |  \n|_|_) \\_\\_/ |_| \\ |_| \\ |_|  |_|  \n\n"
echo -ne "${c_white} __    ____  _      ____  ___    __   _____  ___   ___  \n/ /\`_ | |_  | |\\ | | |_  | |_)  / /\\   | |  / / \\ | |_) \n\\_\\_/ |_|__ |_| \\| |_|__ |_| \\ /_/--\\  |_|  \\_\\_/ |_| \\ \n\n"

# Read in our configuration.
read_config

# Get and validate user name
while :
do
	echo -ne "\n${c_cyan}Author's name:${c_default} "; read USERNAME
	validate_input "$USERNAME" 0 # No underscores or slashes allowed.
	if [ $is_valid == 1 ]; then
		break
	fi
	echo -e "${c_red}Error: ${c_white}The author's name can only be made up of letters and numbers.${c_default}"
done

# Get and validate plugin name
is_valid=0
while :
do
	echo -ne "${c_cyan}Plugin's name:${c_default} "; read PLUGINNAME
	validate_input "$PLUGINNAME" 0 0 # Nothing but letters here.
	if [ $is_valid == 1 ]; then
		break
	fi
	echo -e "${c_red}Error: ${c_white}The plugin's name can only be made up of letters.${c_default}"
done

# Get and validate the version
while :
do
	echo -ne "${c_cyan}Plugin Version (${c_default}0.1${c_cyan} by default):${c_default} "; read PLUGINVERSION
	PLUGINVERSION=${PLUGINVERSION:-0.1}
	validate_input "$PLUGINVERSION" 1 1 1 # Put whatever you want here.
	if [ $is_valid == 0 ]; then
		PLUGINVERSION="0.1"
		break # No real validation happening currently, so continue on without the loop
	fi
done

# Set the filenames and paths.
echo -e "${c_cyan}Generating  ${c_green}manifest${c_cyan}..\n\n${c_white}Plugin: ${c_green}${PLUGINNAME}\n${c_white}Version: ${c_blue}${PLUGINVERSION}\n${c_white}Author: ${c_yellow}${USERNAME}${c_default}\n"
BLOCKLISTENER=BlockListener.java
YBLOCKLISTENER=${PLUGINNAME}BlockListener.java
PLAYERLISTENER=PlayerListener.java
YPLAYERLISTENER=${PLUGINNAME}PlayerListener.java 
PLUGIN=YPlugin.java
YPLUGIN="${PLUGINNAME}.java"
ENDPATH="${output_folder}/${PLUGINNAME}/src/${USERNAME}/${PLUGINNAME}"
BINPATH="${output_folder}/${PLUGINNAME}/bin"

# Create the output directories.
mkdir -p "${ENDPATH}"
mkdir -p "${BINPATH}"

# Store our current path, then enter the output area.
SCRIPTROOT=`pwd`
cd "${ENDPATH}"

# Create our plugin's YAML file.
cd ../../../../
echo "name: $PLUGINNAME

main: $USERNAME.$PLUGINNAME

version: $PLUGINVERSION" > plugin.yml

# Inform USERNAME on status.
echo -e "${c_cyan}Generating ${c_green}Source Files${c_cyan}..${c_default}"

# Copy the rest of the template files.
cd "${SCRIPTROOT}"
sed -e "s/<yourname>/$USERNAME/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${BLOCKLISTENER}" > "${ENDPATH}/$YBLOCKLISTENER"
sed -e "s/<yourname>/$USERNAME/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${PLAYERLISTENER}" > "${ENDPATH}/$YPLAYERLISTENER"
sed -e "s/<yourname>/$USERNAME/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${PLUGIN}" > "${ENDPATH}/${PLUGINNAME}.java"

# Project file generation.

## Eclipse
if [ $gen_eclipse == 1 ]; then
	echo -e "${c_cyan}Generating ${c_green}Eclipse Project Files${c_cyan}..${c_default}"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/eclipse/.project" > "${output_folder}/${PLUGINNAME}/.project"
	cp "${SCRIPTROOT}/projects/eclipse/.classpath" "${output_folder}/${PLUGINNAME}/.classpath"
fi

## IntelliJ
if [ $gen_intellij == 1 ]; then
	echo -e "${c_cyan}Generating ${c_green}Intelli-J Project Files${c_cyan}..${c_default}"
	mkdir -p "${output_folder}/${PLUGINNAME}/.idea"
	echo -n "${PLUGINNAME}" > "${output_folder}/${PLUGINNAME}/.idea/.name"
	cp "${SCRIPTROOT}/projects/intellij/compiler.xml" "${output_folder}/${PLUGINNAME}/.idea/compiler.xml"
	cp "${SCRIPTROOT}/projects/intellij/encodings.xml" "${output_folder}/${PLUGINNAME}/.idea/encodings.xml"
	cp "${SCRIPTROOT}/projects/intellij/vcs.xml" "${output_folder}/${PLUGINNAME}/.idea/vcs.xml"
	cp "${SCRIPTROOT}/projects/intellij/project.iml" "${output_folder}/${PLUGINNAME}/${PLUGINNAME}.iml"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/intellij/modules.xml" > "${output_folder}/${PLUGINNAME}/.idea/modules.xml"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/intellij/workspace.xml" > "${output_folder}/${PLUGINNAME}/.idea/workspace.xml"
fi

## NetBeans
if [ $gen_netbeans == 1 ]; then
	echo -e "${c_cyan}Generating ${c_green}Netbeans Project Files${c_cyan}..${c_default}"
	mkdir -p "${output_folder}/${PLUGINNAME}/nbproject"
	mkdir -p "${output_folder}/${PLUGINNAME}/nbproject/private"
	cp "${SCRIPTROOT}/projects/netbeans/genfiles.properties" "${output_folder}/${PLUGINNAME}/nbproject/genfiles.properties"
	cp "${SCRIPTROOT}/projects/netbeans/private/private.properties" "${output_folder}/${PLUGINNAME}/nbproject/private/private.properties"
	sed -e "s/{{USERNAME}}/$USERNAME/g" -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/netbeans/project.properties" > "${output_folder}/${PLUGINNAME}/nbproject/project.properties"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/netbeans/build-impl.xml" > "${output_folder}/${PLUGINNAME}/nbproject/build-impl.xml"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/netbeans/project.xml" > "${output_folder}/${PLUGINNAME}/nbproject/project.xml"
fi

## Apache Ant
if [ $gen_ant == 1 ]; then
	echo -e "${c_cyan}Generating ${c_green}Ant Build File${c_cyan}..${c_default}"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/ant/build.xml" > "${output_folder}/${PLUGINNAME}/build.xml"
fi

# Done
echo -e "\n${c_cyan}~~~${c_green} Done! ${c_cyan}~~~${c_default}"
echo -e "\n\n${c_yellow}NOTE: ${c_white}You will need to add a reference to wherever you keep Bukkit's jar file if you decided to generate an IDE project/build file. Look for this integrated into this script later.${c_default}\n"
if [ $_OS -a $_OS != 'nt' ]; then
	pause
fi