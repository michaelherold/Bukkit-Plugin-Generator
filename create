#!/bin/bash
## A simple script to generate the skeleton for a new BukkitMod plugin.
## Written by: Pezmc

# OS Detection
## Check if we're running windows. If so, clear the
## "bash: warning: could not find /tmp, please create!
## error that likely occurred when bash was started.
if [ $_OS -a $_OS == "NT" ]; then
	_OS='nt'
else
	# Get the OS name and lowercase it.
	_OS=`uname -s | tr '[A-Z]' '[a-z]'`
	
	# Now test if it's Linux or Mac OSX
	if [[ $_OS == *linux* ]]; then
		_OS='linux'
	elif [[ $_OS == *cygwin* ]]; then
		_OS='nt'
	elif [[ $_OS == *darwin* ]]; then
		_OS='mac'
	fi
fi

# Set up the ANSI escape colors depending on OS.
if [[ $_OS == 'linux' || $_OS == 'nt' ]]; then
	# Standard ANSI escape codes.
	DEFAULT='\e[0m'
	RED='\e[1;31m'
	GREEN='\e[1;32m'
	YELLOW='\e[1;33m'
	BLUE='\e[1;34m'
	MAGENTA='\e[1;35m'
	CYAN='\e[1;36m'
	WHITE='\e[1;37m'
elif [[ $_OS == 'mac' ]]; then
	# For Mac OS X, we have to do it slightly different.
	DEFAULT='\033[0m'
	RED='\033[1;31m'
	GREEN='\033[1;32m'
	YELLOW='\033[1;33m'
	BLUE='\033[1;34m'
	MAGENTA='\033[1;35m'
	CYAN='\033[1;36m'
	WHITE='\033[1;37m'
fi

# List of IDEs supported by project generation
IDE_LIST=( Ant Eclipse IntelliJ Netbeans )

# Generate banner
function banner() {
	echo -ne "${CYAN} ____  _    _ _  ___  _______ _______   _____  _      _    _  _____ _____ _   _\n|  _ \\| |  | | |/ / |/ /_   _|__   __| |  __ \\| |    | |  | |/ ____|_   _| \\ | |\n| |_) | |  | | ' /| ' /  | |    | |    | |__) | |    | |  | | |  __  | | |  \\| |\n|  _ <| |  | |  < |  <   | |    | |    |  ___/| |    | |  | | | |_ | | | | . \` |\n| |_) | |__| | . \\| . \\ _| |_   | |    | |    | |____| |__| | |__| |_| |_| |\\  |\n|____/ \\____/|_|\\_\\_|\\_\\_____|  |_|    |_|    |______|\\____/ \\_____|_____|_| \\_|\n\n"
	echo -ne "${WHITE}           _____ ______ _   _ ______ _____        _______ ____  _____  \n          / ____|  ____| \\ | |  ____|  __ \\    /\\|__   __/ __ \\|  __ \\ \n         | |  __| |__  |  \\| | |__  | |__) |  /  \\  | | | |  | | |__) |\n         | | |_ |  __| | . \` |  __| |  _  /  / /\\ \\ | | | |  | |  _  / \n         | |__| | |____| |\\  | |____| | \\ \\ / ____ \\| | | |__| | | \\ \\ \n          \\_____|______|_| \\_|______|_|  \\_|_/    \\_\\_|  \\____/|_|  \\_\\ \n\n"
}

# Set up the configuration file, either via a default mode or interactive mode.
# @param $1 The absolute path of the configuration file.
function configure() {
	# Grab configuration path
	cfgPath=$1
	
	# Give the user the option to configure their preferences
	if [ -z "$use_config" ]; then
		prompt="\n${CYAN}No ${GREEN}config ${CYAN}file found. Would you like to configure the system? (Y/N): ${DEFAULT}"
		yes_no config "$prompt"
	else
		config=1
		echo
	fi
	
	if [ $config == 1 ]; then
		# Start configuration process
		# Ask for output_path. Default to "."
		echo -ne "${CYAN}Where would you like to put the source files? (Default: \".\"): ${DEFAULT}"
		read OUTPUTFOLDER
		if [ -z "$OUTPUTFOLDER" ]; then
			OUTPUTFOLDER="."
		fi
		
		# Ask for username
		prompt="${CYAN}Author's Username (Type ? for help):${DEFAULT} "
		helpmsg="${GREEN}------------------------------- USERNAME HELP --------------------------------\n\n\
${DEFAULT}Your ${GREEN}username${DEFAULT} should be whatever you want to be known by. This could be your \n\
real name, or it could be your Minecraft username.\n"
		error="${RED}Error: ${WHITE}The username can only be made up of letters and numbers.${DEFAULT}"
		validation_loop AUTHOR "$prompt" "$error" "$helpmsg" 0 0 1
		
		# Ask for namespace.
		prompt="${CYAN}Author's Namespace (Type ? for help):${DEFAULT} "
		helpmsg="${GREEN}
------------------------------- NAMESPACE HELP -------------------------------\n\n\
${DEFAULT}
A namespace is an identifier used to differentiate your code from someone \n\
else's. To figure out your namespace, take the URL of your website and reverse\n\
it.\n\n\
\
  For example, if your website was ${GREEN}minecraft.net${DEFAULT}, your namespace would be\n\
  ${GREEN}net.minecraft${DEFAULT}.\n\n\
\
If you do not have a website, you can reverse your email address.\n\n\
\
  For example, if your email address was ${GREEN}jane@doe.com${DEFAULT}, your \"namespace\" could \n\
  be ${GREEN}com.doe.jane${DEFAULT}.\n"
		error="${RED}Error: ${WHITE}A namespace can only be made up of letters, numbers, \".\" and \"-\".${DEFAULT}"
		bukkit_error="${RED}Error: ${WHITE}You cannot use Bukkit's namespace.${DEFAULT}"
		while :
		do
			echo -ne "$prompt"
			read NAMESPACE
			
			if [[ "$NAMESPACE" == "?" ]]; then
				echo -e "$helpmsg"
			elif [ ! -n "$NAMESPACE" ]; then
				echo -e "$error"
			else
				NAMESPACE=$(echo $NAMESPACE | tr '[A-Z]' '[a-z]')
				# Check for a valid namespace
				# TODO: Create a better regular expression for this
				if [[ "$NAMESPACE" =~ [A-Za-z0-9\.\-]+ ]]; then
					# Check for use of the Bukkit name
					if [[ $NAMESPACE == org.bukkit* || $NAMESPACE == com.bukkit* || $NAMESPACE == net.bukkit* ]]; then
						echo -e "$bukkit_error"
					else
						if [ "$NAMESPACE" == "$BASH_REMATCH" ]; then
							# Remove trailing period from edge case
							if [ "${NAMESPACE:(-1)}" == "." ]; then
								NAMESPACE="${NAMESPACE%\.}"
							fi
							break
						else
							echo -e "$error"
						fi
					fi
				fi
			fi
		done
		
		# Ask for user input for config for each IDE. Loop until yes or no.
		for ide in ${IDE_LIST[@]} ;
		do
			set $ide;
			local gen_var="gen_$(echo $ide | tr '[A-Z]' '[a-z]')"
			yes_no $gen_var "${CYAN}Would you like to build a project for $ide? (Y/N): ${DEFAULT}"
		done
		
		# Write configured file
		write_config $cfgPath
		
	else
		# If they don't want to configure their preferences, write a default
		# config with all IDEs set to false
		echo -e "\n${CYAN}Creating ${GREEN}default config${CYAN}...${DEFAULT}" >&2
		OUTPUTFOLDER="\".\""
		for ide in ${IDE_LIST[@]} ;
		do
			set $ide;
			local gen_var="\$gen_$(echo $ide | tr '[A-Z]' '[a-z]')"
			eval ${gen_var#$}=0
		done
		write_config $cfgPath
		source $cfgPath 
	fi
	
	echo
}

# Pause (Getch)
function pause(){
	read -p "Press any key to continue..."
}

# Print the status of project generation generically
# @param $1 A string representation of the IDE to check.
# @param $2 The setting pulled from the configuration file for the IDE.
function print_generation() {
	local str_ide="$1"
	local gen="$2"
	echo -ne "    ${str_ide}${DEFAULT}: " >&2
	if [ $gen == 1 ]; then
		echo -e "${GREEN}True${DEFAULT}" >&2
	else
		echo -e "${RED}False${DEFAULT}" >&2
	fi
}

# Read Configuration Files
function read_config(){
	local cfgPath="$(pwd)/settings.cfg"
	if [ -a $cfgPath ]; then
		# There was a config file present, so output its preferences
		echo -e "\n${CYAN}Reading ${GREEN}config${CYAN}...${DEFAULT}"
		source $cfgPath
		echo -e "  ${CYAN}Creating IDE-specific projects:${DEFAULT}"
		for ide in ${IDE_LIST[@]} ;
		do
			set $ide;
			local gen_var="\$gen_$(echo $ide | tr '[A-Z]' '[a-z]')"
			eval gen_var=$gen_var
			print_generation $ide $gen_var
		done
		echo -e "  ${CYAN}Output Folder:${GREEN} \"$OUTPUTFOLDER\" ${DEFAULT}"
		
		if [ -n "$AUTHOR" ]; then
			echo -e "  ${CYAN}Author's Username:${GREEN} "$AUTHOR" ${DEFAULT}"
		fi
		if [ -n "$NAMESPACE" ]; then
			echo -e "  ${CYAN}Author's Namespace:${GREEN} "$NAMESPACE" ${DEFAULT}"
		fi
		
		echo
		
		yes_no use_config "Do you want to use this configuration? (Y/N): "
		if [ $use_config == 0 ]; then
			configure "$cfgPath"
		fi
	else
		configure "$cfgPath"
	fi
	
	return
}

# Write a config file
# @param $1 The absolute path to the configuration file.
function write_config() {
	local cfgFile=$1
	echo "# General Settings" > $cfgFile
	echo "OUTPUTFOLDER=\"$OUTPUTFOLDER\"" >> $cfgFile
	echo "AUTHOR=\"$AUTHOR\"" >> $cfgFile
	echo "NAMESPACE=\"$NAMESPACE\"" >> $cfgFile

	echo -e "\n# Project File Generation" >> $cfgFile

	for ide in ${IDE_LIST[@]} ;
	do
		set $ide;
		local gen_var="\$gen_$(echo $ide | tr '[A-Z]' '[a-z]')"
		local gen_val=$gen_var
		eval gen_val=$gen_val
		echo -e "${gen_var#$}=$gen_val" >> $cfgFile
	done
}

# Input validation.
function validate_input() {
	local _true=1; local _false=0
	# Get the input.
	local _input=${1}
	
	# Disallow blank input
	if [ ! -n "$_input" ]; then
		is_valid=$_false
		return
	fi
	
	# Same as above, but with
	# dashes and underscores.
	local _symbols=${2:-$_true}
	# Unless stated otherwise,
	# numbers will be allowed.
	local _numbers=${3:-$_true}
	# Finally, anything
	local _anything=${4:-$_false}
	if [[ $_anything == $_true ]]; then
		is_valid=$_true
		return
	fi
	# Escape some characters in the actual value.
	local _action=${_input//\$/\\\$}
	_action=${_action/\"/}
	
	# Begin assembling the expression.
	local _expr="sed -e 's/[a-zA-Z"
	
	## If we allow numbers, add them in.
	if [ $_numbers == $_true ]; then
		_expr="${_expr}0-9"
	fi
	
	## If we allow symbols, add them in.
	if [ $_symbols == $_true ]; then
		_expr="${_expr}_-"
	fi
	
	# Finish it off.
	_expr="${_expr}]//g'"
	
	# Now put it all together.
	local _result=""
	eval "_result=\$(echo -ne \"${_action}\" | ${_expr})"
	is_valid=$(( ${#_result} == $_false ? $_true : $_false ))
	return
}

# A simple loop ensuring the validation of a variable
# @param $1 The variable to validate.
# @param $2 The input prompt.
# @param $3 The error message.
# @param $4 The help message.
# @param $5 Flag controlling allowance of dashes and underscores.
# @param $6 Flag controlling allowance of numbers.
# @param $7 Flag toggling validation off (i.e. allowing anything).
function validation_loop() {
	while :
	do
		local __resultvar=$1
		local _result
		echo -ne "$2"; read _result
		if [[ "$_result" == "?" ]]; then
			echo -e "$4"
		else
			validate_input "$_result" $5 $6 $7
			if [ $is_valid == 1 ]; then
				break
			fi
			echo -e "$3"
		fi
	done
	eval $__resultvar="'$_result'"
	is_valid=0
}

# A simple looping yes/no dialog
# @param $1 The variable to write
# @param $2 The prompt to display
function yes_no() {
	local __resultvar=$1
	local _result
	echo -ne "$2"
	read _result; _result=$(echo $_result | tr '[A-Z]' '[a-z]')
	while :
	do
		if [ "$_result" == "y" -o "$_result" == "n" ]; then
			break;
		fi
		echo -ne "${RED}Error: ${DEFAULT}Input not recognized. Please enter Y or N: "
		read _result; _result=$(echo $_result | tr '[A-Z]' '[a-z]')
	done
	
	if [ "$_result" == "y" ]; then
		_result=1
	else
		_result=0
	fi
	eval $__resultvar="'$_result'"
}

# Our banner.
banner

# Read in our configuration.
read_config

# Get and validate user name
if [ -z "$AUTHOR" ]; then
	prompt="\n${CYAN}Author's Username (only letters and numbers):${DEFAULT} "
	error="${RED}Error: ${WHITE}The username can only be made up of letters and numbers.${DEFAULT}"
	validation_loop AUTHOR "$prompt" "$error" 0 1 0
fi

# Get and validate plugin name
prompt="${CYAN}Plugin's name:${DEFAULT} "
error="${RED}Error: ${WHITE}The plugin's name can only be made up of letters.${DEFAULT}"
validation_loop PLUGINNAME "$prompt" "$error" 0 0 0 # Disallow numbers and symbols
PLUGINNAME=$(echo $PLUGINNAME | awk '{printf("%s%s\n",toupper(substr($0,1,1)),substr($0,2))}')
PLUGINNAMELC=$(echo $PLUGINNAME | tr '[A-Z]' '[a-z]')

# Get and validate the version
prompt="${CYAN}Plugin Version (${DEFAULT}0.1${CYAN} by default):${DEFAULT} "
echo -ne "$prompt"; read PLUGINVERSION
PLUGINVERSION=${PLUGINVERSION:-0.1}
validate_input "$PLUGINVERSION" 1 1 1 # Put whatever you want here.
if [ $is_valid == 0 ]; then
	PLUGINVERSION="0.1"
fi

# Set the filenames and paths.
echo -e "${CYAN}Generating  ${GREEN}manifest${CYAN}..

${WHITE}Plugin: ${GREEN}${PLUGINNAME}
${WHITE}Version: ${BLUE}${PLUGINVERSION}
${WHITE}Author: ${YELLOW}${AUTHOR}${DEFAULT}
"
BLOCKLISTENER=BlockListener.java
YBLOCKLISTENER=${PLUGINNAME}BlockListener.java
PLAYERLISTENER=PlayerListener.java
YPLAYERLISTENER=${PLUGINNAME}PlayerListener.java 
PLUGIN=YPlugin.java
YPLUGIN="${PLUGINNAME}.java"
BINPATH="${OUTPUTFOLDER}/${PLUGINNAME}/bin"
BASEPATH="${OUTPUTFOLDER}/${PLUGINNAME}/src"
if [ -z "$NAMESPACE" ]; then
	ENDPATH="${OUTPUTFOLDER}/${PLUGINNAME}/src/${AUTHOR}/${PLUGINNAMELC}"
else
	namespace=${NAMESPACE//./\/}
	ENDPATH="${OUTPUTFOLDER}/${PLUGINNAME}/src/${namespace}/${PLUGINNAMELC}"
fi

# Create the output directories.
mkdir -p "${ENDPATH}"
mkdir -p "${BINPATH}"

# Store our current path, then enter the output area.
SCRIPTROOT=`pwd`
BASEPATH="${SCRIPTROOT}/${PLUGINNAME}"

# Create our plugin's YAML file.
cd "${BASEPATH}/src"
if [ -z "$NAMESPACE" ]; then
echo -e "name: $PLUGINNAME\n\nmain: $AUTHOR.$PLUGINNAMELC\n\nversion: $PLUGINVERSION" > plugin.yml
else
echo -e "name: $PLUGINNAME\n\nmain: $NAMESPACE.$PLUGINNAMELC\n\nversion: $PLUGINVERSION" > plugin.yml
fi

# Inform AUTHOR on status.
echo -e "${CYAN}Generating ${GREEN}Source Files${CYAN}..${DEFAULT}"

# Copy the rest of the template files.
cd "${SCRIPTROOT}"
if [ -n "$NAMESPACE" ]; then
	sed -e "s/<namespace>/$NAMESPACE.$PLUGINNAMELC/g" -e "s/<yourname>/$AUTHOR/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${BLOCKLISTENER}" > "${ENDPATH}/$YBLOCKLISTENER"
	sed -e "s/<namespace>/$NAMESPACE.$PLUGINNAMELC/g" -e "s/<yourname>/$AUTHOR/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${PLAYERLISTENER}" > "${ENDPATH}/$YPLAYERLISTENER"
	sed -e "s/<namespace>/$NAMESPACE.$PLUGINNAMELC/g" -e "s/<yourname>/$AUTHOR/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${PLUGIN}" > "${ENDPATH}/${PLUGINNAME}.java"
else
	sed -e "s/<namespace>/$AUTHOR.$PLUGINNAMELC/g" -e "s/<yourname>/$AUTHOR/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${BLOCKLISTENER}" > "${ENDPATH}/$YBLOCKLISTENER"
	sed -e "s/<namespace>/$AUTHOR.$PLUGINNAMELC/g" -e "s/<yourname>/$AUTHOR/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${PLAYERLISTENER}" > "${ENDPATH}/$YPLAYERLISTENER"
	sed -e "s/<namespace>/$AUTHOR.$PLUGINNAMELC/g" -e "s/<yourname>/$AUTHOR/g" -e "s/<pluginname>/$PLUGINNAME/g" "${SCRIPTROOT}/files/${PLUGIN}" > "${ENDPATH}/${PLUGINNAME}.java"
fi

# Project file generation.

## Eclipse
if [ $gen_eclipse == 1 ]; then
	echo -e "${CYAN}Generating ${GREEN}Eclipse Project Files${CYAN}..${DEFAULT}"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/eclipse/.project" > "${OUTPUTFOLDER}/${PLUGINNAME}/.project"
	cp "${SCRIPTROOT}/projects/eclipse/.classpath" "${OUTPUTFOLDER}/${PLUGINNAME}/.classpath"
fi

## IntelliJ
if [ $gen_intellij == 1 ]; then
	echo -e "${CYAN}Generating ${GREEN}Intelli-J Project Files${CYAN}..${DEFAULT}"
	mkdir -p "${OUTPUTFOLDER}/${PLUGINNAME}/.idea"
	echo -n "${PLUGINNAME}" > "${OUTPUTFOLDER}/${PLUGINNAME}/.idea/.name"
	cp "${SCRIPTROOT}/projects/intellij/compiler.xml" "${OUTPUTFOLDER}/${PLUGINNAME}/.idea/compiler.xml"
	cp "${SCRIPTROOT}/projects/intellij/encodings.xml" "${OUTPUTFOLDER}/${PLUGINNAME}/.idea/encodings.xml"
	cp "${SCRIPTROOT}/projects/intellij/vcs.xml" "${OUTPUTFOLDER}/${PLUGINNAME}/.idea/vcs.xml"
	cp "${SCRIPTROOT}/projects/intellij/project.iml" "${OUTPUTFOLDER}/${PLUGINNAME}/${PLUGINNAME}.iml"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/intellij/modules.xml" > "${OUTPUTFOLDER}/${PLUGINNAME}/.idea/modules.xml"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/intellij/workspace.xml" > "${OUTPUTFOLDER}/${PLUGINNAME}/.idea/workspace.xml"
fi

## NetBeans
if [ $gen_netbeans == 1 ]; then
	echo -e "${CYAN}Generating ${GREEN}Netbeans Project Files${CYAN}..${DEFAULT}"
	mkdir -p "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject"
	mkdir -p "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject/private"
	cp "${SCRIPTROOT}/projects/netbeans/genfiles.properties" "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject/genfiles.properties"
	cp "${SCRIPTROOT}/projects/netbeans/private/private.properties" "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject/private/private.properties"
	sed -e "s/{{AUTHOR}}/$AUTHOR/g" -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/netbeans/project.properties" > "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject/project.properties"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/netbeans/build-impl.xml" > "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject/build-impl.xml"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/netbeans/project.xml" > "${OUTPUTFOLDER}/${PLUGINNAME}/nbproject/project.xml"
fi

## Apache Ant
if [ $gen_ant == 1 ]; then
	echo -e "${CYAN}Generating ${GREEN}Ant Build File${CYAN}..${DEFAULT}"
	sed -e "s/{{PLUGINNAME}}/$PLUGINNAME/g" "${SCRIPTROOT}/projects/ant/build.xml" > "${OUTPUTFOLDER}/${PLUGINNAME}/build.xml"
fi

# Done
echo -e "\n${CYAN}~~~${GREEN} Done! ${CYAN}~~~${DEFAULT}"
echo -e "\n\n${YELLOW}NOTE: ${WHITE}You will need to add a reference to wherever you keep Bukkit's jar file if you decided to generate an IDE project/build file. Look for this integrated into this script later.${DEFAULT}\n"
if [ $_OS -a $_OS != 'nt' ]; then
	pause
fi
